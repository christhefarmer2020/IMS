@model IEnumerable<IMS.ViewModels.IndexVM>
@{
    ViewBag.Title = "Index";
}
@{
    if (ViewBag.CreateAlert == "True")
    {
        <div class="alert alert-success alert-dismissible fade in">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
            <strong>Success!</strong> The image was successfully saved!
        </div>
    }
    if (ViewBag.CreateAlert == "False")
    {
        <div class="alert alert-danger alert-dismissible fade in">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
            <strong>Warning!</strong> There is an error and the image was not saved. Please try again!
        </div>
    }
    if (ViewBag.DeleteAlert == "True")
    {
        <div class="alert alert-success alert-dismissible fade in">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
            <strong>Success!</strong> The image was successfully deleted.
        </div>
    }
    if (ViewBag.DeleteAlert == "False")
    {
        <div class="alert alert-danger alert-dismissible fade in">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
            <strong>Warning!</strong> The image was not deleted. Please try again!
        </div>
    }
}
<h2></h2>

<style>
    .myactionlink:hover {
        color: black;
    }

    .myactionlink {
        color: white;
    }

    .myactionlink {
        border: double
    }

    .myactionlink {
        background-color: forestgreen
    }

    .myactionlink {
        padding-left: 5px
    }

    .myactionlink {
        padding-right: 5px
    }

    .myactionlink {
        padding-top: 5px
    }

    .myactionlink {
        padding-bottom: 5px
    }
</style>

<p>
    @Html.ActionLink(" Upload Image(s) ", "Create", "EncounterImages", new { @class = "myactionlink" })

</p>
<!--<script src="jquery-3.4.1.js"></script>-->
<script type="text/javascript">
    $(document).ready(function () {
        $('#myTable').DataTable({
            orderCellsTop: true,
            initComplete: function (table) {
                // This is for the search bar option 
                this.api().columns('.search-filter').every(function (i) {
                    var column = this;
                    var target = table.aoHeader[1][column.index()].cell;
                    var searchable = $('<input class="form-control form-control-sm" type="text"/>')
                        .appendTo(target)
                        .on('keyup change clear', function () {
                            var val = $.fn.dataTable.util.escapeRegex(
                                $(this).val()
                            );
                            column
                                .search(val || '', true, false)
                                .draw();
                        });
                });

                // This is for the dropdown fitlers 
                this.api().columns('.dropdown-filter').every(function (i) {
                    var column = this;
                    var target = table.aoHeader[1][column.index()].cell;
                    var select = $('<select class="form-control form-control-sm"><options value="></options></select>')
                        .appendTo(target)
                        .on('keyup change clear', function () {
                            var val = $.fn.dataTable.util.escapeRegex(
                                $(this).val()
                            );
                            column
                                .search(val ? '^' + val + '$' : '', true, false)
                                .draw();
                        });

                    //get filter state of current column
                    var sSearch = table.aoPreSearchCols[i].sSearch.replace(/(\^|\$)/g, "");

                    // filter out html string and get unique options for the column
                    var uniqueData = column.data().unique().reduce(function (reducer, v) {
                        //if the string has any html elements then they are filterd out
                        if (v.match(/(\^|\$)/)) {
                            var input = $(v).find('input');
                            if ($input.length == 1) {
                                v = input.val();
                            }
                            else {
                                v = $(v).text();
                            }
                        }

                        if (v && reducer.indexOf(v) == -1) {
                            reducer.push(v.trim());
                        }
                        return reducer;
                    }, []).sort();

                    uniqueData.forEach(function (d, j) {
                        isSelect = "";
                        if (sSearch && sSearch === d) {
                            isSelect = "selected";
                        }
                        select.append('<option ' + isSelect + ' value="' + d + '">' + d + '</option>')
                    });
                })

                this.api().columns('.daterange-filter').every(function () {
                    var column = this;
                    var target = table.aoHeader[1][column.index()].cell;
                    var div = $('<div class="input-group-sm" style="margin:0 !important; min-width:150px !important; width:100%;"><div class="input-group-append"></div></div>').appendTo(target);

                    var datepicker = $('<input placeholder="Date Range Filter" class="dt-rg-picker form-control"/>').prependTo(div).flatpickr({
                        mode: "range",
                        allowInput: true,
                        dateFormat: 'n/j/Y',
                        onChange: function (range) {
                            if (range.length == 0 || range.length == 2) {
                                table.oInstance.api().draw();
                            }
                        }
                    });
                    $('<button class="btn btn-secondary" type="button">Clear</button>').appendTo(div.find('div')).click(datepicker.clear);
                    $.fn.dataTable.ext.search.push(
                        function (settings, data) {
                            var range = datepicker.selectedDates;
                            var dateStringRegex = data[column.index()].match(/([0-9]*\/){2}[0-9]*/g) || [''];
                            var compTime = new Date(dateStringRegex[0]).getTime();
                            return range.length == 0 || (range.length >= 2 && !isNaN(compTime) && range[0].getTime() <= compTime && range[1].getTime() >= compTime);
                        }
                    );
                });

                this.api().columns('.hideColumn').visible(false);
            }
        });
    });
</script>
<div class="table-responsive">
    <!-- <table class="table table-striped table-dark table-sm">-->
    <table id="myTable" class="table table-striped table-dark table-sm" width=95%>
        <thead>
        <tr>

            <th>
                @Html.DisplayNameFor(model => model.ImageData)
            </th>
            <th class="search-filter">
                @Html.DisplayNameFor(model => model.PAT_MRN)
            </th>
            <th class="search-filter">
                @Html.DisplayNameFor(model => model.Providers)
            </th>
            <th class="search-filter">
                @Html.DisplayNameFor(model => model.Contact_Date)
            </th>
            <th class="dropdown-filter">
                @Html.DisplayNameFor(model => model.Gender)
            </th>
            <th class="search-filter">
                @Html.DisplayNameFor(model => model.First_Name)
            </th>
            <th class="search-filter">
                @Html.DisplayNameFor(model => model.Last_Name)
            </th>
            <th class="daterange-filter">
                @Html.DisplayNameFor(model => model.Date_Of_Birth)
            </th>
            <th class="search-filter">
                @Html.DisplayNameFor(model => model.Department_Name)
            </th>
            <th class="search-filter">
                @Html.DisplayNameFor(model => model.Visit_Type)
            </th>
            <th class="search-filter">
                @Html.DisplayNameFor(model => model.Consent)
            </th>
            <th class="search-filter"></th>
        </tr>
        <tr>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
            </thead>
        <tbody>
            @if (Model != null)
            {
                foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @{
                                string imreBase64Data = Convert.ToBase64String(item.ImageData);
                                string imgDataURL = string.Format("data:image/png;base64,{0}", imreBase64Data);
                            }
                            <a download="test.jpg" href="@imgDataURL" title="Encounter Image">
                                <img src="@imgDataURL" width="75" height="75" />
                            </a>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.PAT_MRN)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Providers)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Contact_Date)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Gender)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.First_Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Last_Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Date_Of_Birth)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Department_Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Visit_Type)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Consent)
                        </td>
                        <td>
                            @Html.ActionLink("Delete", "Delete", new { id = item.image_id }, new { @class = "myactionlink" })
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
